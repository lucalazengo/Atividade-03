# An√°lise de Reviews do Spotify - Minera√ß√£o de Dados

##  Descri√ß√£o
An√°lise de reviews textuais do Spotify para comparar t√©cnicas de vetoriza√ß√£o e avaliar o impacto de diferentes configura√ß√µes de n-grams na representa√ß√£o textual e desempenho de classifica√ß√£o.

##  Requisitos Atendidos
- **Pr√©-processamento**:
  - Convers√£o para min√∫sculas
  - Remo√ß√£o de pontua√ß√£o/n√∫meros
  - Elimina√ß√£o de stopwords
  - Stemming (PorterStemmer)

- **Vetoriza√ß√£o**:
  - `CountVectorizer` (unigramas e bigramas)
  - `TfidfVectorizer` (unigramas e bigramas)
  - Gera√ß√£o de matrizes vetorizadas

- **Avalia√ß√£o**:
  - Compara√ß√£o do n√∫mero de features
  - An√°lise do impacto dos bigramas
  - Desempenho com DecisionTreeClassifier

## Principais Resultados
1. **Volume de Features**:
   - Unigramas: ~20k features
   - Bigramas: ~260k features (+1207%)

2. **Desempenho (Acur√°cia)**:

 - TfidfVectorizer Bigram: 80.8%
 - CountVectorizer Bigram: 80.3%
 - TfidfVectorizer Unigram: 80.3%
 - CountVectorizer Unigram: 79.3%

 
3. **Tempos de Processamento**:
- Bigramas demandaram ~4x mais tempo que unigramas
- TF-IDF foi marginalmente mais lento que CountVectorizer

4. **Features Mais Relevantes**:
- "app", "music", "song", "play", "spotifi"

## üõ†Ô∏è Como Reproduzir
1. Instale os requisitos: `pip install pandas scikit-learn nltk`
2. Execute o notebook c√©lula por c√©lula
3. Verifique os arquivos gerados:
- `resultados_vetorizacao.csv`
- `resultados_acuracia.csv` (se houver labels)

##  Conclus√£o
Bigramas enriqueceram significativamente a representa√ß√£o textual (12x mais features) 
com ganho marginal de acur√°cia (+1.5pp). TF-IDF superou levemente CountVectorizer, sendo 
a combina√ß√£o "TF-IDF + Bigramas" a melhor configura√ß√£o para este problema.